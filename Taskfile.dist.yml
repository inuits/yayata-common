version: '3.38'

vars:

  DOCKER: 'docker'
  COMPOSE: '{{.DOCKER}} compose'

dotenv: ['.env.local', '.env', '.env.dist'] # first file takes precedence

includes:
  git:
    taskfile: ./Tasks/GitTasks.yml
  k3d:
    taskfile: ./Tasks/K3dTasks.yml
  kubectl:
    taskfile: ./Tasks/KubectlTasks.yml

tasks:
  default:
    cmds:
      - "'{{.TASK_EXE}}' --list-all"

  clone:
    deps:
      - task: git:clone
        vars: { URL: '{{.NINETOFIVER_URL}}', DIRECTORY: '{{.NINETOFIVER_DIRECTORY}}', BRANCH: '{{.NINETOFIVER_BRANCH}}' }
      - task: git:clone
        vars: { URL: '{{.YAYATA_URL}}', DIRECTORY: '{{.YAYATA_DIRECTORY}}', BRANCH: '{{.YAYATA_BRANCH}}' }

  pull:
    deps:
      - task: git:pull
        vars: { URL: '{{.NINETOFIVER_URL}}', DIRECTORY: '{{.NINETOFIVER_DIRECTORY}}', BRANCH: '{{.NINETOFIVER_BRANCH}}' }
      - task: git:pull
        vars: { URL: '{{.YAYATA_URL}}', DIRECTORY: '{{.YAYATA_DIRECTORY}}', BRANCH: '{{.YAYATA_BRANCH}}' }

  prepare:
    deps:
      - task: clone

  start:
    deps:
      - task: prepare
    cmds:
      - cd "{{.NINETOFIVER_DIRECTORY}}" && "{{.TASK_EXE}}" start
      - cd "{{.YAYATA_DIRECTORY}}" && "{{.TASK_EXE}}" start

  stop:
    deps:
      - task: prepare
    cmds:
      - cd "{{.NINETOFIVER_DIRECTORY}}" && "{{.TASK_EXE}}" stop
      - cd "{{.YAYATA_DIRECTORY}}" && "{{.TASK_EXE}}" stop

  remove:
    requires:
      vars: [ NINETOFIVER_DIRECTORY, YAYATA_DIRECTORY ]
    deps:
      - task: git:remove
        vars: { DIRECTORY: '{{.NINETOFIVER_DIRECTORY}}' }
      - task: git:remove
        vars: { DIRECTORY: '{{.YAYATA_DIRECTORY}}' }

  clean:
    desc: Clean up
    cmds:
      - task: remove
      - if test -f .env; then mv .env .env.bck; fi

  # WIP V2 setup with K3D

  v2:compose:image:ninetofiver:assure-built-and-pushed-to-k3d:
    run: once
    requires:
      vars: [ DOCKER, COMPOSE, K3D_REGISTRY_HOST, K3D_REGISTRY_PORT ]
    preconditions:
      - sh: "test '{{.DOCKER}}' != '' "
        msg: "DOCKER was not provided"
      - sh: "test '{{.COMPOSE}}' != '' "
        msg: "COMPOSE was not provided"
      - sh: "test '{{.K3D_REGISTRY_HOST}}' != '' "
        msg: "K3D_REGISTRY_HOST was not provided"
      - sh: "test '{{.K3D_REGISTRY_PORT}}' != '' "
        msg: "K3D_REGISTRY_PORT was not provided"
    deps:
      - task: "k3d:cluster:assure-started"
    sources:
      - "../925r/**"
    cmds:
      - |
        cd ../925r && {{.COMPOSE}} --project-name tmp --file compose.yaml down --rmi all
        cd ../925r && {{.COMPOSE}} build ninetofiver
        cd ../925r && {{.COMPOSE}} --project-name tmp --file compose.yaml up -d ninetofiver
        cd ../925r && IMAGE_ID="$({{.COMPOSE}} --project-name tmp --file compose.yaml images --quiet ninetofiver)"
        cd ../925r && {{.DOCKER}} image tag "${IMAGE_ID}" "{{.K3D_RESOURCE_PREFIX}}{{.K3D_REGISTRY_HOST}}:{{.K3D_REGISTRY_PORT}}/ninetofiver:latest"
        cd ../925r && {{.COMPOSE}} --project-name tmp --file compose.yaml rm --stop --force --volumes
        cd ../925r && {{.DOCKER}} image push "{{.K3D_RESOURCE_PREFIX}}{{.K3D_REGISTRY_HOST}}:{{.K3D_REGISTRY_PORT}}/ninetofiver:latest"
      - |
        {{.KUBECTL}} rollout restart --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" --selector app=ninetofiver deployment || true

  v2:compose:image:yayata:assure-built-and-pushed-to-k3d:
    run: once
    requires:
      vars: [ DOCKER, COMPOSE, K3D_REGISTRY_HOST, K3D_REGISTRY_PORT ]
    preconditions:
      - sh: "test '{{.DOCKER}}' != '' "
        msg: "DOCKER was not provided"
      - sh: "test '{{.COMPOSE}}' != '' "
        msg: "COMPOSE was not provided"
      - sh: "test '{{.K3D_REGISTRY_HOST}}' != '' "
        msg: "K3D_REGISTRY_HOST was not provided"
      - sh: "test '{{.K3D_REGISTRY_PORT}}' != '' "
        msg: "K3D_REGISTRY_PORT was not provided"
    deps:
      - task: "k3d:cluster:assure-started"
    sources:
      - "../yayata/**"
    cmds:
      - |
        cd ../yayata && {{.COMPOSE}} --project-name tmp --file compose.yaml down --rmi all
        cd ../yayata && {{.COMPOSE}} build yayata
        cd ../yayata && {{.COMPOSE}} --project-name tmp --file compose.yaml up -d yayata
        cd ../yayata && IMAGE_ID="$({{.COMPOSE}} --project-name tmp --file compose.yaml images --quiet yayata)"
        cd ../yayata && {{.DOCKER}} image tag "${IMAGE_ID}" "{{.K3D_RESOURCE_PREFIX}}{{.K3D_REGISTRY_HOST}}:{{.K3D_REGISTRY_PORT}}/yayata:latest"
        cd ../yayata && {{.COMPOSE}} --project-name tmp --file compose.yaml rm --stop --force --volumes
        cd ../yayata && {{.DOCKER}} image push "{{.K3D_RESOURCE_PREFIX}}{{.K3D_REGISTRY_HOST}}:{{.K3D_REGISTRY_PORT}}/yayata:latest"
      - |
        {{.KUBECTL}} rollout restart --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" --selector app=yayata deployment || true

  v2:app:ninetofiver:start:
    run: once
    requires:
      vars: [ KUBECTL, KUBERNETES_NAMESPACE_NAME ]
    preconditions:
      - sh: "test '{{.KUBECTL}}' != '' "
        msg: "KUBECTL was not provided"
      - sh: "test '{{.KUBERNETES_NAMESPACE_NAME}}' != '' "
        msg: "KUBERNETES_NAMESPACE_NAME was not provided"
    deps:
      - task: "k3d:registry:assure-created"
      - task: "k3d:cluster:assure-started"
    cmds:
      - task: "kubectl:namespace:assure-created"
      - task: "v2:compose:image:ninetofiver:assure-built-and-pushed-to-k3d"
      - |
        {{.KUBECTL}} apply --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" --filename "k3d/mysql.yaml"
      - |
        {{.KUBECTL}} wait --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" pod --selector app=mysql --for=condition=ready --timeout=300s
      - |
        {{.KUBECTL}} describe --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" service --selector app=mysql | grep -E "Endpoints:[[:space:]0-9\.]+:3306"
      - |
        {{.KUBECTL}} apply --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" --filename "k3d/ninetofiver.yaml"
      - |
        {{.KUBECTL}} wait --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" pod --selector app=ninetofiver --for=condition=ready --timeout=300s
      - |
        {{.KUBECTL}} describe --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" service --selector app=ninetofiver | grep -E "Endpoints:[[:space:]0-9\.]+:8000"

  v2:app:ninetofiver:stop:
    run: once
    requires:
      vars: [ KUBECTL, KUBERNETES_NAMESPACE_NAME ]
    preconditions:
      - sh: "test '{{.KUBECTL}}' != '' "
        msg: "KUBECTL was not provided"
      - sh: "test '{{.KUBERNETES_NAMESPACE_NAME}}' != '' "
        msg: "KUBERNETES_NAMESPACE_NAME was not provided"
    deps:
      - task: "k3d:registry:assure-created"
      - task: "k3d:cluster:assure-started"
    cmds:
      - |
        {{.KUBECTL}} delete --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" --filename "k3d/ninetofiver.yaml" --ignore-not-found
      - |
        {{.KUBECTL}} delete --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" --filename "k3d/mysql.yaml" --ignore-not-found

  v2:app:yayata:start:
    run: once
    requires:
      vars: [ KUBECTL, KUBERNETES_NAMESPACE_NAME ]
    preconditions:
      - sh: "test '{{.KUBECTL}}' != '' "
        msg: "KUBECTL was not provided"
      - sh: "test '{{.KUBERNETES_NAMESPACE_NAME}}' != '' "
        msg: "KUBERNETES_NAMESPACE_NAME was not provided"
    deps:
      - task: "k3d:registry:assure-created"
      - task: "k3d:cluster:assure-started"
    cmds:
      - task: "kubectl:namespace:assure-created"
      - task: "v2:compose:image:yayata:assure-built-and-pushed-to-k3d"
      - |
        {{.KUBECTL}} apply --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" --filename "k3d/yayata.yaml"
      - |
        {{.KUBECTL}} wait --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" pod --selector app=yayata --for=condition=ready --timeout=300s
      - |
        {{.KUBECTL}} describe --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" service --selector app=yayata | grep -E "Endpoints:[[:space:]0-9\.]+:8080"

  v2:app:yayata:stop:
    run: once
    requires:
      vars: [ KUBECTL, KUBERNETES_NAMESPACE_NAME ]
    preconditions:
      - sh: "test '{{.KUBECTL}}' != '' "
        msg: "KUBECTL was not provided"
      - sh: "test '{{.KUBERNETES_NAMESPACE_NAME}}' != '' "
        msg: "KUBERNETES_NAMESPACE_NAME was not provided"
    deps:
      - task: "k3d:registry:assure-created"
      - task: "k3d:cluster:assure-started"
    cmds:
      - |
        {{.KUBECTL}} delete --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" --filename "k3d/yayata.yaml" --ignore-not-found

  v2:app:*:logs:
    requires:
      vars: [ KUBECTL, KUBERNETES_NAMESPACE_NAME ]
    preconditions:
      - sh: "test '{{.KUBECTL}}' != '' "
        msg: "KUBECTL was not provided"
      - sh: "test '{{.KUBERNETES_NAMESPACE_NAME}}' != '' "
        msg: "KUBERNETES_NAMESPACE_NAME was not provided"
    vars:
      APP: "{{index .MATCH 0}}"
    cmds:
      - |
        {{.KUBECTL}} logs --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" --selector app={{.APP}} --all-containers=true --since-time="$({{.KUBECTL}} get pods --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" --selector app={{.APP}} --output=custom-columns='creationTimestamp:.metadata.creationTimestamp' --no-headers)" --follow

  v2:app:*:sh:
    vars:
      APP: "{{index .MATCH 0}}"
    cmds:
      - task: "v2:app:{{.APP}}:exec"
        vars: { COMMAND: "sh" }

  v2:app:*:bash:
    vars:
      APP: "{{index .MATCH 0}}"
    cmds:
      - task: "v2:app:{{.APP}}:exec"
        vars: { COMMAND: "bash" }

  v2:app:*:exec:
    requires:
      vars: [ KUBECTL, KUBERNETES_NAMESPACE_NAME ]
    preconditions:
      - sh: "test '{{.KUBECTL}}' != '' "
        msg: "KUBECTL was not provided"
      - sh: "test '{{.KUBERNETES_NAMESPACE_NAME}}' != '' "
        msg: "KUBERNETES_NAMESPACE_NAME was not provided"
    vars:
      APP: "{{index .MATCH 0}}"
    cmds:
      - |
        {{.KUBECTL}} exec --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" --stdin --tty "$(kubectl get --namespace "{{.KUBERNETES_NAMESPACE_NAME}}" pod --selector app={{.APP}} --no-headers --output=custom-columns="NAME:.metadata.name")" -- {{.COMMAND}} {{.CLI_ARGS}}

  v2:start:
    cmds:
      - task: "v2:app:ninetofiver:start"
      - task: "v2:app:yayata:start"

  v2:stop:
    cmds:
      - task: "v2:app:yayata:stop"
      - task: "v2:app:ninetofiver:stop"

  v2:clean:
    cmds:
      - task: "kubectl:namespace:assure-deleted"
      - task: "k3d:cluster:assure-deleted"
      - task: "k3d:registry:assure-deleted"

  v2:debug:
    requires:
      vars: [ KUBECTL, KUBERNETES_NAMESPACE_NAME ]
    preconditions:
      - sh: "test '{{.KUBECTL}}' != '' "
        msg: "KUBECTL was not provided"
      - sh: "test '{{.KUBERNETES_NAMESPACE_NAME}}' != '' "
        msg: "KUBERNETES_NAMESPACE_NAME was not provided"
    deps:
      - task: "k3d:registry:assure-created"
      - task: "k3d:cluster:assure-started"
    cmds:
      # @see https://www.baeldung.com/ops/kubernetes-list-all-resources
      - for i in $({{.KUBECTL}} api-resources --no-headers --namespaced --verbs=list -o name | tr "\n" " "); do
          output=$({{.KUBECTL}} get ${i} --show-kind --ignore-not-found --namespace "{{.KUBERNETES_NAMESPACE_NAME}}");
          if test -n "${output}"; then echo "{{.KUBECTL}} get ${i} --show-kind --ignore-not-found --namespace \"{{.KUBERNETES_NAMESPACE_NAME}}\""; echo "${output}"; echo " "; fi;
        done

  v2:info:
    cmds:
      - |
        echo "Executables:"
        echo "- docker: {{.DOCKER}}"
        echo "- docker compose: {{.COMPOSE}}"
        echo "- k3d: {{.K3D}}"
        echo "- kubectl: {{.KUBECTL}}"
        echo "Context:"
        echo "- k3d registry: {{.K3D_RESOURCE_PREFIX}}{{.K3D_REGISTRY_HOST}}:{{.K3D_REGISTRY_PORT}}"
        echo "- k3d cluster: {{.K3D_CLUSTER_NAME}}"
        echo "- kubernetes namespace: {{.KUBERNETES_NAMESPACE_NAME}}"
